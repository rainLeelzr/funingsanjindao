<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.funing.commonfn.dao.RoomDao">

    <insert id="save" useGeneratedKeys="true" keyProperty="id" parameterType="com.funing.commonfn.model.Room">
		INSERT INTO TB_ROOM (
			ID, CREATED_TIME, CREATED_USER_ID, DIAMOND, LAST_LOGIN_TIME, MULTIPLE, PAY_TYPE, PLAYERS, ROOM_CODE, START,STATE, TIMES, TYPE
		) VALUES (
			#{id}, #{createdTime}, #{createdUserId}, #{diamond}, #{lastLoginTime}, #{multiple}, #{payType}, #{players}, #{roomCode},#{start}, #{state}, #{times}, #{type}
		)
	</insert>

    <delete id="delete" parameterType="com.funing.commonfn.model.Room">
        DELETE FROM TB_ROOM
        <include refid="CriteriaSQL"/>
    </delete>

    <update id="update" parameterType="com.funing.commonfn.model.Room">
        UPDATE TB_ROOM
        <include refid="SetSQL"/>
        <include refid="CriteriaSQL"/>
    </update>

    <select id="selectCount" parameterType="com.funing.commonfn.model.Room" resultType="_long">
        SELECT COUNT(1) FROM TB_ROOM
        <include refid="CriteriaSQL"/>
    </select>

    <select id="selectList" parameterType="com.funing.commonfn.model.Room" resultMap="RoomResultMap">
        SELECT * FROM TB_ROOM
        <include refid="CriteriaSQL"/>
        <include refid="OrderbySQL"/>
        <include refid="LimitSQL"/>
    </select>


    <resultMap id="RoomResultMap" type="com.funing.commonfn.model.Room">
        <id property="id" column="ID"/>
        <result property="createdTime" column="CREATED_TIME"/>
        <result property="createdUserId" column="CREATED_USER_ID"/>
        <result property="diamond" column="DIAMOND"/>
        <result property="lastLoginTime" column="LAST_LOGIN_TIME"/>
        <result property="multiple" column="MULTIPLE"/>
        <result property="payType" column="PAY_TYPE"/>
        <result property="players" column="PLAYERS"/>
        <result property="roomCode" column="ROOM_CODE"/>
        <result property="start" column="START"/>
        <result property="state" column="STATE"/>
        <result property="times" column="TIMES"/>
        <result property="type" column="TYPE"/>
    </resultMap>

    <sql id="SetSQL">
        <set>
            <if test="entity.createdTime != null">CREATED_TIME = #{entity.createdTime},</if>
            <if test="entity.createdUserId != null">CREATED_USER_ID = #{entity.createdUserId},</if>
            <if test="entity.diamond != null">DIAMOND = #{entity.diamond},</if>
            <if test="entity.lastLoginTime != null">LAST_LOGIN_TIME = #{entity.lastLoginTime},</if>
            <if test="entity.multiple != null">MULTIPLE = #{entity.multiple},</if>
            <if test="entity.payType != null">PAY_TYPE = #{entity.payType},</if>
            <if test="entity.players != null">PLAYERS = #{entity.players},</if>
            <if test="entity.roomCode != null">ROOM_CODE = #{entity.roomCode},</if>
            <if test="entity.start != null">START = #{entity.start},</if>
            <if test="entity.state != null">STATE = #{entity.state},</if>
            <if test="entity.times != null">TIMES = #{entity.times},</if>
            <if test="entity.type != null">TYPE = #{entity.type},</if>
        </set>
    </sql>

    <sql id="CriteriaSQL">
        <where>
            <if test="criteria != null and criteria.notEmpty">
                <foreach collection="criteria.criterions" item="criterion">
                    <choose>
                        <when test="criterion.noValue">
                            and ${criterion.field} ${criterion.condition}
                        </when>
                        <when test="criterion.singleValue">
                            and ${criterion.field} ${criterion.condition} #{criterion.value}
                        </when>
                        <when test="criterion.betweenValue">
                            and ${criterion.field} ${criterion.condition} #{criterion.value} and #{criterion.value2}
                        </when>
                        <when test="criterion.listValue">
                            and ${criterion.field} ${criterion.condition}
                            <foreach collection="criterion.value" item="item" open="(" separator="," close=")">
                                #{item}
                            </foreach>
                        </when>
                    </choose>
                </foreach>
            </if>
        </where>
    </sql>

    <sql id="OrderbySQL">
        <if test="criteria != null and criteria.orderly">
            ORDER BY
            <foreach collection="criteria.orderbies" item="orderby" separator=",">
                ${orderby.field} ${orderby.value}
            </foreach>
        </if>
    </sql>

    <sql id="LimitSQL">
        <if test="criteria != null and criteria.pagination">
            LIMIT #{criteria.limit.value}, #{criteria.limit.value2}
        </if>
    </sql>

</mapper>